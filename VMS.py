# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget
from PyQt5.QtGui import QPainter, QColor
import time
import random
import subprocess
import cpp_file_creator
from PyQt5.QtCore import Qt, QRect, QPoint, QSize
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QPushButton,QFileDialog
from PyQt5.QtGui import QPixmap


access_list = []
current_access_index = 0



def read_output_trace_file():
    file = open("results_trace.txt")
    lines = file.readlines()
    for line in lines:
        l = line.split()
        if len(l)>1 and l[1] == "access":
            block_id= (int(l[6]),int(l[8]))
            access_list.append(block_id)

    print("total access : ",len(access_list))


read_output_trace_file()

class CustomSet(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.rectangles = []  # List to store rectangles
        self.set_colors = []
        self.color_going_to_flags = []
        self.simulation_instruction_count = 10000 #read from GUI
        self.part = round(self.simulation_instruction_count/3)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        # Clear the area
        painter.eraseRect(self.rect())

        # Draw all rectangles in the list
        for rect_data in self.rectangles:
            rect = rect_data['rect']
            color = rect_data['color']
            painter.setPen(Qt.black)
            painter.setBrush(color)
            painter.drawRect(rect)

    def addSet(self, rect, color):
        self.rectangles.append({'rect': rect, 'color': color})
        self.set_colors.append([246,216,96])
        self.color_going_to_flags.append('green')
        self.update()  # Trigger a repaint

    def clearSets(self):
        self.rectangles = []  # Clear the list of rectangles
        self.set_colors = []
        self.color_going_to_flags = []
        self.update()  # Trigger a repaint

    def changeSetColor(self, rect_index):
        # print("Total rectangles : ",len(self.rectangles)) # rectangles 64

        if(self.color_going_to_flags[rect_index] == 'green'):
            value = self.set_colors[rect_index][0]
            value = value - 195/self.part
            self.set_colors[rect_index][0] = value

            value = self.set_colors[rect_index][1]
            value = value - 63/self.part
            self.set_colors[rect_index][1] = value

            value = self.set_colors[rect_index][2]
            value = value - 96/self.part
            self.set_colors[rect_index][2] = value

            if round(value) == round(0):
                self.color_going_to_flags[rect_index] = 'blue'
                self.set_colors[rect_index][0] = 51
                self.set_colors[rect_index][1] = 153
                self.set_colors[rect_index][2] = 0

        if(self.color_going_to_flags[rect_index] == 'blue'):
            value = self.set_colors[rect_index][0]
            value = value + 72/self.part
            self.set_colors[rect_index][0] = value

            value = self.set_colors[rect_index][1]
            value = value - 91/self.part
            self.set_colors[rect_index][1] = value

            value = self.set_colors[rect_index][2]
            value = value + 210/self.part
            self.set_colors[rect_index][2] = value

            if round(value) == round(210):
                self.color_going_to_flags[rect_index] = 'red'
                self.set_colors[rect_index][0] = 123
                self.set_colors[rect_index][1] = 62
                self.set_colors[rect_index][2] = 210

        if(self.color_going_to_flags[rect_index] == 'red'):
            value = self.set_colors[rect_index][0]
            value = value + 132/self.part
            self.set_colors[rect_index][0] = value

            value = self.set_colors[rect_index][1]
            value = value - 14/self.part
            self.set_colors[rect_index][1] = value

            value = self.set_colors[rect_index][2]
            value = value - 162/self.part
            self.set_colors[rect_index][2] = value

            if round(value) == round(48):
                self.color_going_to_flags[rect_index] = 'black'
                self.set_colors[rect_index][0] = 255
                self.set_colors[rect_index][1] = 48
                self.set_colors[rect_index][2] = 48


        # print(self.set_colors[rect_index])
        # print(self.color_going_to_flags[rect_index])

        new_color = QColor(round(self.set_colors[rect_index][0]),round(self.set_colors[rect_index][1]),round(self.set_colors[rect_index][2]))
        self.rectangles[rect_index]['color'] = new_color
        self.update()






class CustomRectangle(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.rectangles = []  # List to store rectangles
        self.rect_colors = []
        self.color_going_to_flags = []
        self.simulation_instruction_count = 1000 #read from GUI
        self.part = round(self.simulation_instruction_count/3)

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)

        # Clear the area
        painter.eraseRect(self.rect())

        # Draw all rectangles in the list
        for rect_data in self.rectangles:
            rect = rect_data['rect']
            color = rect_data['color']
            painter.setPen(Qt.black)
            painter.setBrush(color)
            painter.drawRect(rect)

    def addRectangle(self, rect, color):
        self.rectangles.append({'rect': rect, 'color': color})
        self.rect_colors.append([246,216,96])
        self.color_going_to_flags.append('green')
        self.update()  # Trigger a repaint

    def clearRectangles(self):
        self.rectangles = []  # Clear the list of rectangles
        self.rect_colors = []
        self.color_going_to_flags = []
        self.update()  # Trigger a repaint

    def changeRectangleColor(self, rect_index):
        # print("Total rectangles : ",len(self.rectangles)) #768 rectangles 64 x 12 = 768   
    
        if(self.color_going_to_flags[rect_index] == 'green'):
            value = self.rect_colors[rect_index][0]
            value = value - 195/self.part
            self.rect_colors[rect_index][0] = value

            value = self.rect_colors[rect_index][1]
            value = value - 63/self.part
            self.rect_colors[rect_index][1] = value

            value = self.rect_colors[rect_index][2]
            value = value - 96/self.part
            self.rect_colors[rect_index][2] = value

            if round(value) == round(0):
                self.color_going_to_flags[rect_index] = 'blue'
                self.rect_colors[rect_index][0] = 51
                self.rect_colors[rect_index][1] = 153
                self.rect_colors[rect_index][2] = 0

        if(self.color_going_to_flags[rect_index] == 'blue'):
            value = self.rect_colors[rect_index][0]
            value = value + 72/self.part
            self.rect_colors[rect_index][0] = value

            value = self.rect_colors[rect_index][1]
            value = value - 91/self.part
            self.rect_colors[rect_index][1] = value

            value = self.rect_colors[rect_index][2]
            value = value + 210/self.part
            self.rect_colors[rect_index][2] = value

            if round(value) == round(210):
                self.color_going_to_flags[rect_index] = 'red'
                self.rect_colors[rect_index][0] = 123
                self.rect_colors[rect_index][1] = 62
                self.rect_colors[rect_index][2] = 210

        if(self.color_going_to_flags[rect_index] == 'red'):
            value = self.rect_colors[rect_index][0]
            value = value + 132/self.part
            self.rect_colors[rect_index][0] = value

            value = self.rect_colors[rect_index][1]
            value = value - 14/self.part
            self.rect_colors[rect_index][1] = value

            value = self.rect_colors[rect_index][2]
            value = value - 162/self.part
            self.rect_colors[rect_index][2] = value

            if round(value) == round(48):
                self.color_going_to_flags[rect_index] = 'black'
                self.rect_colors[rect_index][0] = 255
                self.rect_colors[rect_index][1] = 48
                self.rect_colors[rect_index][2] = 48


        # print(self.rect_colors[rect_index])
        # print(self.color_going_to_flags[rect_index])
        new_color = QColor(round(self.rect_colors[rect_index][0]),round(self.rect_colors[rect_index][1]),round(self.rect_colors[rect_index][2]))
        self.rectangles[rect_index]['color'] = new_color
        self.update()



        
class Ui_MainWindow(object):

    def traverse_all_accesses(self):
        cpp_file_creator.create_code_file(self.textEdit.toPlainText())
        read_output_trace_file()
        global current_access_index
        if current_access_index >= (len(access_list)):
            current_access_index = 0
        print("button pressed")
        for access_block in access_list:
            
            current_access_index += 1    
            new_color = QColor(Qt.red)
            self.rectangles[access_block[1]][access_block[0]].changeColor(new_color)
            QtWidgets.QApplication.processEvents()  # Process events to update the GUI
            time.sleep(0.0001) 
            print("current_access_index : ",current_access_index)    

    def next_access(self):
        global current_access_index
        print(current_access_index)
        skip_ammount = int(self.lineEdit.displayText())

        while skip_ammount > 0:
            if current_access_index > len(access_list):
                print("End of trace ")
                return
            block_id = access_list[current_access_index]

            print("current_access_index : ",current_access_index,'block id : ',block_id)
            set_count = int(self.comboBox_sets.currentText())
            block_index = block_id[1]*set_count + block_id[0]
            set_index = block_id[0]
            self.customRectangle.changeRectangleColor(block_index)
            self.customSet.changeSetColor(set_index)
            # self.customRectangle.changeRectangleColor(0)
            # self.customSet.changeSetColor(0)
            current_access_index += 1
            skip_ammount -= 1
            self.label_address.setText(str("Current Access "+str(current_access_index)+" "+str(block_id)))





    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow 
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 693)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())

        MainWindow.setSizePolicy(sizePolicy)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())

        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton_bar = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_bar.setGeometry(QtCore.QRect(130,520,800,30))

        self.label_address = QtWidgets.QLabel(self.centralwidget)
        self.label_address.setGeometry(QtCore.QRect(1000,520,200,30))

        self.pushButton_run = QtWidgets.QPushButton(self.centralwidget)                     #run button
        self.pushButton_run.setGeometry(QtCore.QRect(370, 600, 80, 25))
        self.pushButton_run.setObjectName("runButton")

        self.pushButton_next = QtWidgets.QPushButton(self.centralwidget)                   #next button
        self.pushButton_next.setGeometry(QtCore.QRect(470, 600, 80, 25))
        self.pushButton_next.setObjectName("nextButton")

        self.pushButton_update_parameter = QtWidgets.QPushButton(self.centralwidget)                   #next button
        self.pushButton_update_parameter.setGeometry(QtCore.QRect(600, 10, 200, 25))
        self.pushButton_update_parameter.setObjectName("parameterButton")

        self.radioButton_lru = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_lru.setGeometry(QtCore.QRect(9, 32, 53, 23))
        self.radioButton_lru.setObjectName("radioButton")

        self.radioButton_srrip = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_srrip.setGeometry(QtCore.QRect(9, 61, 65, 23))
        self.radioButton_srrip.setObjectName("radioButton_2")

        self.toolButton_upload_trace = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_upload_trace.setGeometry(QtCore.QRect(1060, 460, 26, 24))
        self.toolButton_upload_trace.setObjectName("toolButton")

        self.toolButton_upload_file = QtWidgets.QToolButton(self.centralwidget)
        self.toolButton_upload_file.setGeometry(QtCore.QRect(1240, 460, 26, 24))
        self.toolButton_upload_file.setObjectName("toolButton_2")

        self.label_select_policy = QtWidgets.QLabel(self.centralwidget)
        self.label_select_policy.setGeometry(QtCore.QRect(9, 9, 180, 17))
        self.label_select_policy.setObjectName("label")
        
        self.label_write_code = QtWidgets.QLabel(self.centralwidget)
        self.label_write_code.setGeometry(QtCore.QRect(980, 20, 198, 17))
        self.label_write_code.setObjectName("label_2")
        
        self.label_select_trace = QtWidgets.QLabel(self.centralwidget)
        self.label_select_trace.setGeometry(QtCore.QRect(940, 470, 106, 17))
        self.label_select_trace.setObjectName("label_3")

        self.label_ways = QtWidgets.QLabel(self.centralwidget)
        self.label_ways.setGeometry(QtCore.QRect(500, 70, 106, 17))
        self.label_ways.setObjectName("label_f1")

        self.label_sets = QtWidgets.QLabel(self.centralwidget)
        self.label_sets.setGeometry(QtCore.QRect(5, 275, 106, 17))
        self.label_sets.setObjectName("label_f2")

        self.label_block_size = QtWidgets.QLabel(self.centralwidget)
        self.label_block_size.setGeometry(QtCore.QRect(230, 10, 71, 17))
        self.label_block_size.setObjectName("label_4")
        self.label_sets2 = QtWidgets.QLabel(self.centralwidget)
        self.label_sets2.setGeometry(QtCore.QRect(370, 10, 31, 17))
        self.label_sets2.setObjectName("label_5")
        self.label_ways2 = QtWidgets.QLabel(self.centralwidget)
        self.label_ways2.setGeometry(QtCore.QRect(460, 10, 41, 17))
        self.label_ways2.setObjectName("label_6")

        self.label_skip_instructions = QtWidgets.QLabel(self.centralwidget)
        self.label_skip_instructions.setGeometry(QtCore.QRect(580, 600, 160, 20))

        self.comboBox_block_size = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_block_size.setGeometry(QtCore.QRect(300, 10, 60, 25))
        self.comboBox_block_size.setObjectName("comboBox")
        self.comboBox_block_size.addItem("")
        self.comboBox_block_size.addItem("")
        self.comboBox_block_size.addItem("")
        self.comboBox_block_size.addItem("")
        self.comboBox_sets = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_sets.setGeometry(QtCore.QRect(400, 10, 60, 25))
        self.comboBox_sets.setObjectName("comboBox_2")
        self.comboBox_sets.addItem("")
        self.comboBox_sets.addItem("")
        self.comboBox_sets.addItem("")
        self.comboBox_sets.addItem("")
        self.comboBox_sets.addItem("")
        self.comboBox_sets.addItem("")
        self.comboBox_ways = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_ways.setGeometry(QtCore.QRect(500, 10, 60, 25))
        self.comboBox_ways.setObjectName("comboBox_3")
        self.comboBox_ways.addItem("")
        self.comboBox_ways.addItem("")
        self.comboBox_ways.addItem("")
        self.comboBox_ways.addItem("")
        self.comboBox_ways.addItem("")
        self.label_upload_file = QtWidgets.QLabel(self.centralwidget)
        self.label_upload_file.setGeometry(QtCore.QRect(1100, 470, 131, 17))
        self.label_upload_file.setObjectName("label_7")
        



        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(980, 50, 341, 401))

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(750, 600, 100, 20))

        self.label_write_tolerance = QtWidgets.QLabel(self.centralwidget)
        self.label_write_tolerance.setGeometry(QtCore.QRect(870, 600, 110, 20))

        self.lineEdit_tolerance = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_tolerance.setGeometry(QtCore.QRect(990, 600, 100, 20))

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textEdit.sizePolicy().hasHeightForWidth())

        self.textEdit.setSizePolicy(sizePolicy)
        self.textEdit.setTabletTracking(False)
        self.textEdit.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.textEdit.setObjectName("textEdit")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1127, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.box_width = 800
        self.box_height = 400


        self.customRectangle = CustomRectangle(self.centralwidget)
        self.customRectangle.setGeometry(QRect(130, 100, self.box_width, self.box_height))

        self.customSet = CustomSet(self.centralwidget)
        self.customSet.setGeometry(QRect(50,100,50,self.box_height))

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.addRectangles()  # Add some initial rectangles
        self.addSets() #add some sets boxes


    def addSets(self):
        set_count = int(self.comboBox_sets.currentText())
        block_height = round(400/set_count)

        self.clearSets()

        for i in range(set_count):
            y = i*block_height
            rect = QRect(QPoint(0, y), QSize(40,block_height))
            color = QColor(246,216,96)
            self.customSet.addSet(rect,color)

    def clearSets(self):
        self.customSet.clearSets()

    def redrawSets(self):
        self.addSets()

    def addRectangles(self):
           
        set_count = int(self.comboBox_sets.currentText())
        way_count = int(self.comboBox_ways.currentText())
        block_height = round(400/set_count)
        block_width = round(800/way_count)

        # Clear existing rectangles
        self.clearRectangles()

        # Add new rectangles at random positions
        for i in range(way_count):
            for j in range(set_count):
                x = i*block_width
                y = j*block_height
                rect = QRect(QPoint(x, y), QSize(block_width,block_height))
                color = QColor(246, 216,96)
                self.customRectangle.addRectangle(rect, color)

    def clearRectangles(self):
        self.customRectangle.clearRectangles()

    def redrawRectangles(self):
        self.addRectangles()
        self.addSets()
        
        # subprocess.run(["./build_champsim.sh","bimodal","no","no","no","no","lru","1"])
        while(True):
            sample_file = open("sample.txt")
            lines = sample_file.readlines()
            splits = []
            for line in lines:
                splits = line.split()

            if splits[0] == 'modified':
                break

        print("FIle modified")



    
        
        

    def upload_code_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self.centralwidget, 'Upload C/C++ Code', '', 'C/C++ Files (*.c *.cpp *.xz)')
        print("Filename is : ",file_name)
        if file_name:
            with open(file_name, 'r') as file:
                code = file.read()
                self.textEdit.setText(code)

    def upload_trace_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self.centralwidget,'Upload .xz trace file','','Trace files (*.xz)')
        print("Trace file uploaded : ",file_name)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Visual Memory Simulator"))
        self.pushButton_run.setText(_translate("MainWindow", "Run"))
        gradient_color = """
                                       background-color: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                                              stop:0 #F6D860,
                                              stop:0.37 #339900
                                              stop:0.62 #7B3ED2,
                                              stop:1 #FF3030);
                            
                        """
    # Apply the style sheet to the button
        self.pushButton_bar.setStyleSheet(gradient_color)
        self.label_address.setText("block id")
        self.label_write_tolerance.setText("Write Tolerance")
        self.lineEdit_tolerance.setText("1000000")
        self.pushButton_run.clicked.connect(self.traverse_all_accesses)
        self.pushButton_next.setText(_translate("MainWindow", "Next"))
        self.pushButton_next.clicked.connect(self.next_access)
        self.pushButton_update_parameter.setText(_translate("MainWindow", "Update Parameter"))
        self.pushButton_update_parameter.clicked.connect(self.redrawRectangles)
        self.label_select_policy.setText(_translate("MainWindow", "Select Replacement Policy"))
        self.label_write_code.setText(_translate("MainWindow", "Write/Paste your code here - "))
        self.label_select_trace.setText(_translate("MainWindow", "Select trace file"))
        self.label_ways.setText(_translate("MainWindow", "Ways"))
        self.label_sets.setText(_translate("MainWindow", "Sets"))
        self.label_skip_instructions.setText(_translate("MainWindow","Skip Instructions Count"))
        self.radioButton_lru.setText(_translate("MainWindow", "LRU"))
        self.radioButton_srrip.setText(_translate("MainWindow", "SRRIP"))
        self.toolButton_upload_trace.setText(_translate("MainWindow", "..."))
        self.toolButton_upload_file.setText(_translate("MainWindow", "..."))
        
        self.lineEdit.setText(_translate("MainWindow","1"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">#include&lt;stdio.h&gt;</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">int main()</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">{</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">    int a[100][100];</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">    for(int i=0;i&lt;100;i++)</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">    {</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">        for(int j=0;j&lt;100;j++)</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">        {</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">        printf(&quot;%d&quot;,a[i][j]);</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">        }</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">    }</p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">}</p></body></html>"))
        self.textEdit.setText("Trace Uploaded 'astar_163B.trace.xz' ")
        self.label_block_size.setText(_translate("MainWindow", "Block Size"))
        self.label_sets2.setText(_translate("MainWindow", "Sets"))
        self.label_ways2.setText(_translate("MainWindow", "Ways"))
        self.comboBox_block_size.setItemText(0, _translate("MainWindow", "64"))
        self.comboBox_block_size.setItemText(1, _translate("MainWindow", "32"))
        self.comboBox_block_size.setItemText(2, _translate("MainWindow", "128"))
        self.comboBox_block_size.setItemText(3, _translate("MainWindow", "256"))
        self.comboBox_sets.setItemText(0, _translate("MainWindow", "64"))
        self.comboBox_sets.setItemText(1, _translate("MainWindow", "8"))
        self.comboBox_sets.setItemText(2, _translate("MainWindow", "16"))
        self.comboBox_sets.setItemText(3, _translate("MainWindow", "32"))
        self.comboBox_sets.setItemText(4, _translate("MainWindow", "128"))
        self.comboBox_sets.setItemText(5, _translate("MainWindow", "256"))
        self.comboBox_ways.setItemText(0, _translate("MainWindow", "12"))
        self.comboBox_ways.setItemText(1, _translate("MainWindow", "8"))
        self.comboBox_ways.setItemText(2, _translate("MainWindow", "16"))
        self.comboBox_ways.setItemText(3, _translate("MainWindow", "20"))
        self.comboBox_ways.setItemText(4, _translate("MainWindow", "24"))
        self.label_upload_file.setText(_translate("MainWindow", "Upload C/C++ code"))
        self.toolButton_upload_file.clicked.connect(self.upload_code_file)
        self.toolButton_upload_trace.clicked.connect(self.upload_trace_file)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
